# Generated by Django 5.2.4 on 2025-07-28 05:09

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(blank=True, null=True)),
                ('applied_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-applied_at'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('file', models.FileField(upload_to='documents/%Y/%m/')),
                ('document_type', models.CharField(choices=[('resume', 'Resume/CV'), ('certificate', 'Certificate'), ('portfolio', 'Portfolio'), ('other', 'Other')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('is_public', models.BooleanField(default=True)),
                ('file_size', models.IntegerField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institution', models.CharField(max_length=200)),
                ('degree', models.CharField(max_length=100)),
                ('field_of_study', models.CharField(blank=True, max_length=100)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='educations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(max_length=255)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('application', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='shop.application')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('banner_image', models.ImageField(blank=True, null=True, upload_to='banner_images/')),
                ('bio', models.TextField(blank=True)),
                ('title', models.CharField(blank=True, max_length=100, verbose_name='Professional Title')),
                ('location', models.CharField(blank=True, max_length=100)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('website', models.URLField(blank=True)),
                ('views', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudyMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('task_assigned_place', models.CharField(blank=True, max_length=255, null=True, verbose_name='Institution/Organization')),
                ('file', models.FileField(help_text='Upload PDF or image files only', upload_to='study_materials/%Y/%m/')),
                ('material_type', models.CharField(choices=[('pdf', 'PDF'), ('image', 'Image')], max_length=20)),
                ('category', models.CharField(choices=[('all', 'All'), ('school_qp', 'School Question Papers'), ('college_qp', 'College Question Papers'), ('competitive_exam', 'Competitive Exams'), ('entrance_exam', 'Entrance Exams'), ('eligibility_test', 'Eligibility Test'), ('books', 'Books'), ('sample_paper', 'Sample Papers'), ('notes', 'Notes'), ('other', 'Other')], default='other', max_length=20)),
                ('is_public', models.BooleanField(default=True)),
                ('views', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_study_materials', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_materials', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Study Material',
                'verbose_name_plural': 'Study Materials',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MaterialView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('study_material', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='material_views', to='shop.studymaterial')),
            ],
            options={
                'verbose_name': 'Material View',
                'verbose_name_plural': 'Material Views',
                'ordering': ['-viewed_at'],
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('description', models.TextField()),
                ('budget', models.DecimalField(decimal_places=2, default=0.01, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('status', models.CharField(choices=[('posted', 'Posted'), ('assigned', 'Assigned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='posted', max_length=20)),
                ('category', models.CharField(choices=[('general', 'General'), ('urgent', 'Urgent'), ('delivery', 'Delivery'), ('cleaning', 'Cleaning')], default='general', max_length=20)),
                ('task_assigned_place', models.TextField(blank=True, help_text="E.g., 'Harvard University', 'Google Inc', 'ABC School'", null=True, verbose_name='Assigned Place (School/College/Company)')),
                ('deadline', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tasks_assigned', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks_created', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='application',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='shop.task'),
        ),
        migrations.CreateModel(
            name='SocialLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform', models.CharField(choices=[('linkedin', 'LinkedIn'), ('github', 'GitHub'), ('twitter', 'Twitter'), ('instagram', 'Instagram'), ('website', 'Personal Website'), ('other', 'Other')], max_length=50)),
                ('username', models.CharField(max_length=100)),
                ('url', models.URLField()),
                ('is_public', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_links', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['platform'],
                'unique_together': {('user', 'platform', 'username')},
            },
        ),
        migrations.AddIndex(
            model_name='studymaterial',
            index=models.Index(fields=['user'], name='shop_studym_user_id_34ff01_idx'),
        ),
        migrations.AddIndex(
            model_name='studymaterial',
            index=models.Index(fields=['material_type'], name='shop_studym_materia_5cb872_idx'),
        ),
        migrations.AddIndex(
            model_name='studymaterial',
            index=models.Index(fields=['category'], name='shop_studym_categor_fc9f5d_idx'),
        ),
        migrations.AddIndex(
            model_name='studymaterial',
            index=models.Index(fields=['is_public'], name='shop_studym_is_publ_75367b_idx'),
        ),
        migrations.AddIndex(
            model_name='studymaterial',
            index=models.Index(fields=['created_at'], name='shop_studym_created_61d8f9_idx'),
        ),
        migrations.AddIndex(
            model_name='materialview',
            index=models.Index(fields=['study_material'], name='shop_materi_study_m_db2483_idx'),
        ),
        migrations.AddIndex(
            model_name='materialview',
            index=models.Index(fields=['user'], name='shop_materi_user_id_bb689e_idx'),
        ),
        migrations.AddIndex(
            model_name='materialview',
            index=models.Index(fields=['viewed_at'], name='shop_materi_viewed__7b37d0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='application',
            unique_together={('applicant', 'task')},
        ),
    ]
